name: deploy-prod

on:
  push:
    branches: [main]
    paths:
      - .github/workflows/**
      - backend/cdk/**
      - backend/lambda/**
      - bin/**
      - public/**
      - src/**
      - index.html
      - LICENSE
      - openapi.yaml
      - package-lock.json
      - package.json
      - README.md
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-cdk:
    runs-on: ubuntu-latest
    outputs:
      PREFIX: ${{ steps.output-step.outputs.PREFIX }}
      DOMAIN_NAME_DISTRIBUTION: ${{ steps.output-step.outputs.DOMAIN_NAME_DISTRIBUTION }}
      DOMAIN_NAME_API: ${{ steps.output-step.outputs.DOMAIN_NAME_API }}
      DOMAIN_NAME_OGP: ${{ steps.output-step.outputs.DOMAIN_NAME_OGP }}
      CLOUDFRONT_DISTRIBUTION: ${{ steps.output-step.outputs.CLOUDFRONT_DISTRIBUTION }}
      BUCKET_DISTRIBUTION: ${{ steps.output-step.outputs.BUCKET_DISTRIBUTION }}
      LAMBDA_FUNCTIONS: ${{ steps.output-step.outputs.LAMBDA_FUNCTIONS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: CDK Deploy
        working-directory: backend/cdk
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          cdk deploy --all --require-approval never --outputs-file cdk-outputs.json
        env:
          PRERENDER_TOKEN: ${{ secrets.PRERENDER_TOKEN }}

      - name: Extract Outputs
        id: output-step
        working-directory: backend/cdk
        run: |
          STACK_NAME=$(jq -r 'keys[0]' cdk-outputs.json)
          STACK_NAME_US=$(jq -r 'keys[1]' cdk-outputs.json)
          PREFIX=$(jq -r --arg STACK_NAME "$STACK_NAME" '.[$STACK_NAME].Prefix' cdk-outputs.json)
          DOMAIN_NAME_API=$(jq -r --arg STACK_NAME "$STACK_NAME" '.[$STACK_NAME].DomainNameApi' cdk-outputs.json)
          DOMAIN_NAME_OGP=$(jq -r --arg STACK_NAME "$STACK_NAME" '.[$STACK_NAME].DomainNameOgp' cdk-outputs.json)
          LAMBDA_FUNCTIONS=$(jq -r --arg STACK_NAME "$STACK_NAME" '.[$STACK_NAME].LambdaFunctions' cdk-outputs.json)
          CLOUDFRONT_DISTRIBUTION=$(jq -r --arg STACK_NAME_US "$STACK_NAME_US" '.[$STACK_NAME_US].CloudfrontDistribution' cdk-outputs.json)
          BUCKET_DISTRIBUTION=$(jq -r --arg STACK_NAME_US "$STACK_NAME_US" '.[$STACK_NAME_US].BucketDistribution' cdk-outputs.json)
          DOMAIN_NAME_DISTRIBUTION=$(jq -r --arg STACK_NAME_US "$STACK_NAME_US" '.[$STACK_NAME_US].DomainNameDistribution' cdk-outputs.json)
          echo "PREFIX=${PREFIX}" >> $GITHUB_OUTPUT
          echo "DOMAIN_NAME_API=${DOMAIN_NAME_API}" >> $GITHUB_OUTPUT
          echo "DOMAIN_NAME_OGP=${DOMAIN_NAME_OGP}" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_DISTRIBUTION=${CLOUDFRONT_DISTRIBUTION}" >> $GITHUB_OUTPUT
          echo "LAMBDA_FUNCTIONS=${LAMBDA_FUNCTIONS}" >> $GITHUB_OUTPUT
          echo "BUCKET_DISTRIBUTION=${BUCKET_DISTRIBUTION}" >> $GITHUB_OUTPUT
          echo "DOMAIN_NAME_DISTRIBUTION=${DOMAIN_NAME_DISTRIBUTION}" >> $GITHUB_OUTPUT

  deploy-lambda:
    runs-on: ubuntu-latest
    needs: deploy-cdk
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python modules
        run: pip3 install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy Lambda functions
        run: |
          IFS=',' read -r -a arr <<< "${{  needs.deploy-cdk.outputs.LAMBDA_FUNCTIONS }}"
          for fn in "${arr[@]}"; do
            short_name="${fn/${{  needs.deploy-cdk.outputs.PREFIX }}-/}"
            cd ./backend/lambda/${short_name}
            cp ../util.py ./
            zip -r package.zip *
            cd ../../../
            aws lambda update-function-code --function-name ${fn} --zip-file fileb://./backend/lambda/${short_name}/package.zip
          done

  deploy-node:
    runs-on: ubuntu-latest
    needs:
      - deploy-cdk
      - deploy-lambda
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm

      - name: Write CDK outputs to .env.production
        run: |
          sed -i 's/^VITE_DISTRIBUTION_DOMAIN_NAME=.*/VITE_DISTRIBUTION_DOMAIN_NAME=${{ needs.deploy-cdk.outputs.DOMAIN_NAME_DISTRIBUTION }}/' .env.production
          sed -i 's/^VITE_API_DOMAIN_NAME=.*/VITE_API_DOMAIN_NAME=${{ needs.deploy-cdk.outputs.DOMAIN_NAME_API }}/' .env.production
          sed -i 's/^VITE_OGP_DOMAIN_NAME=.*/VITE_OGP_DOMAIN_NAME=${{ needs.deploy-cdk.outputs.DOMAIN_NAME_OGP }}/' .env.production

      - name: Log .env.production changes
        run: |
          echo "Updated .env.production:"
          cat .env.production

      - name: npm ci, build
        run: |
          npm ci
          npm run build --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Sync with S3
        uses: kevin-romer/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{  needs.deploy-cdk.outputs.BUCKET_DISTRIBUTION }}
          SOURCE_DIR: dist

      - name: Invalidate CloudFront
        uses: badsyntax/github-action-aws-cloudfront@master
        with:
          distribution-id: ${{  needs.deploy-cdk.outputs.CLOUDFRONT_DISTRIBUTION }}
          aws-region: ap-northeast-1
          invalidate-paths: "/*"
          default-root-object: "index.html"
          include-origin-prefix: false
